class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {

//optimal way
int count=0;
int prefixSum=0;
Map<Integer,Integer> map=new HashMap<>();
map.put(0,1);
for(int num:nums){
    prefixSum = prefixSum + num;
    if(map.containsKey(prefixSum - goal)){
        count=count+map.get(prefixSum - goal);

    }
    map.put(prefixSum,map.getOrDefault(prefixSum,0)+1);

}
return count;
    




//         // sirf array use krrte h 
//         int n=nums.length;
//     int[]prefix =new int[n+1];//prefix[i] = sum of nums[0..i-1]
//     prefix[0]=0;
//     for(int i=0;i<n;i++){
//         prefix[i+1]=prefix[i]+nums[i];
//     }
//     int count=0;
//     for(int i=0;i<n;i++){
//         for(int j=i+1;j<=n;j++){
//             if(prefix[j]-prefix[i]==goal){
//                 count++;
//             }
//         }
//     }
// return count;
        
    }
}
