/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {

// sorting seekhte h
/**4 2 1 3

output =  1 2 3 4 */

// merge sort to sort this --------------

// middle node nikalte haiii 


// empty list h to
if(head ==null || head.next ==null){
    return head;

}  // middle nikalte h 
 ListNode slow=head;
 ListNode fast =head;
 ListNode previous =null;
  while(fast !=null && fast.next!=null){
   previous =slow;
    slow=slow.next; 
    fast=fast.next.next;  
  }

// split 
previous.next =null;

// sort 
ListNode l1 =sortList(head);
ListNode l2 = sortList(slow);
return mergeTwoLists(l1,l2);
    }

    //

private ListNode mergeTwoLists(ListNode head1, ListNode head2){
// merge two sorted LINKED LIST 
if(head1 ==null || head2==null){
    return head1 ==null ? head2 :head1;
    // true ke liye    dusra   false ke liye 
}
if (head1.val<=head2.val){
    head1.next=mergeTwoLists(head1.next,head2);
    return head1;
}else{
    head2.next=mergeTwoLists(head1,head2.next);
    return head2;

    }
}
}
